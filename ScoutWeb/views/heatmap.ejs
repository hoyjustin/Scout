<html>
    <head>
        <% include template/header %>
        <style>
            body, html { margin:0; padding:0; height:100%;}
            body { font-family:sans-serif; }
            body * { font-weight:200;}
            .leaflet-map-pane img {
  max-width: none;
  max-height: none;
}

             #map {  width:100%; height:100%; display: inline-block; }
        </style>
    </head>
    <body>
    <% include template/navbar %>
<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />

 <div id = 'map'></div>
<div id = 'chartBox'></div>

        </div>
        <% include template/footer %>
    </body>
     <script>


var w = 1280,
    h = 777,
    imageUrl = "/img/floorplan.jpg";

 //heatmap.js config
  var cfg = {
    // radius should be small ONLY if scaleRadius is true (or small radius is intended)
    // if scaleRadius is false it will be the constant radius used in pixels

maxOpacity: 0.6,

                          radius: 10,
                          blur: .90,
    // scales the radius based on map zoom
    "scaleRadius": true, 
    // if set to false the heatmap uses the global maximum for colorization
    // if activated: uses the data maximum within the current map boundaries 
    //   (there will always be a red spot with useLocalExtremas true)
    "useLocalExtrema": false,
    // which field name in your data represents the latitude - default "lat"
    latField: 'x',
    // which field name in your data represents the longitude - default "lng"
    lngField: 'y',
    // which field name in your data represents the data value - default "value"
    valueField: 'value'
  };

  var heatmapLayer = new HeatmapOverlay(cfg);

// map.addLayer(heatmapLayer);

  //setup map
var map = new L.map('map', {
minZoom: 2,
  maxZoom: 4,
  center: [w/2, h/2],
  zoom: 1,
  crs: L.CRS.Simple,
  layers: [heatmapLayer]
});

// calculate the edges of the image, in coordinate space
var southWest = map.unproject([0, h], map.getMaxZoom()-1);
var northEast = map.unproject([w, 0], map.getMaxZoom()-1);
var imageBounds = new L.LatLngBounds(southWest, northEast);

        var imageLayer = L.imageOverlay(imageUrl, imageBounds);
        imageLayer.addTo(map);
imageLayer.bringToBack();
//tell leaflet that the map is exactly as big as the image
map.setMaxBounds(imageBounds);

    console.log(map.getBounds());

// map.fitBounds(imageBounds, {padding: []});
// map.fitWorld(imageBounds, {padding: []});

  //get json from Parse
    $.get('/heatmap/getheatmap')
        .success(function (rawData) {

        var goodData = [];
        //console.log(rawData);

        for (var i in rawData) {
            rawData[i].forEach(function(elem, index) {
                //console.log(elem, index);
                    elem.value = 1;
                    elem.fresh = true;
                    if(elem.coordX && elem.coordY && elem.timestamp && (elem.timestamp.__type == 'Date')) {
                        elem.x = parseFloat(elem.coordX);
                        elem.y = parseFloat(elem.coordY); 
                        elem.date = new Date(elem.timestamp.iso);

                          var point = {
                            x: parseFloat(elem.coordX),
                            y: parseFloat(elem.coordY),
                          };

                        goodData.push(point);
                    }
            });
        }

        var data = {
            data: goodData
          };

        console.log(goodData);
        heatmapLayer.setData(data);
    });

  </script>
</html>
