<html>
    <head>
        <% include template/header %>
        <style>
            body, html { margin:0; padding:0; height:100%;}
            body { font-family:sans-serif; }
            body * { font-weight:200;}
            .leaflet-map-pane img { max-width: none; max-height: none;}
            #map {  width:100%; height:100%; display: inline-block; }
        </style>
        </head>
        <body>
        <% include template/navbar %>
        <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
        <div id = 'map'></div>
        <div id = 'chartBox'></div>
        </div>
        <% include template/footer %>
    </body>
    <script>

    var w = 1280,
    h = 777,
    imageUrl = "/img/floorplan.jpg";

    //heatmap.js config
    var cfg = {
    // radius should be small ONLY if scaleRadius is true (or small radius is intended)
    // if scaleRadius is false it will be the constant radius used in pixels

    maxOpacity: 0.6,
    radius: 4,
    blur: .90,
    // scales the radius based on map zoom
    "scaleRadius": true, 
    // if set to false the heatmap uses the global maximum for colorization
    // if activated: uses the data maximum within the current map boundaries 
    //   (there will always be a red spot with useLocalExtremas true)
    "useLocalExtrema": false,
    // which field name in your data represents the latitude - default "lat"
    latField: 'x',
    // which field name in your data represents the longitude - default "lng"
    lngField: 'y',
    // which field name in your data represents the data value - default "value"
    valueField: 'value'
    };

    var heatmapLayer = new HeatmapOverlay(cfg);

    // map.addLayer(heatmapLayer);

    //setup map
    var map = new L.map('map', {
        minZoom: 2,
        maxZoom: 4,
        center: [0, 0],
        zoom: 1,
        crs: L.CRS.Simple,
        layers: [heatmapLayer]
    });

    var southWest = map.unproject([-(w/2), h/2], map.getMaxZoom()-1);
    var northEast = map.unproject([w/2, -(h/2)], map.getMaxZoom()-1);
    var imageBounds = new L.LatLngBounds(southWest, northEast);
    var imageLayer = L.imageOverlay(imageUrl, imageBounds);
    imageLayer.addTo(map);
    //tell leaflet that the map is exactly as big as the image
    map.setMaxBounds(imageBounds);
    imageLayer.bringToBack();

    //add beacons to map
    var beacon1 = L.marker([1, 1]).addTo(map);
    beacon1.bindPopup("<b>Beacon 1</b>").openPopup();
    var beacon2 = L.marker([4, 1]).addTo(map);
    beacon2.bindPopup("<b>Beacon 2</b>").openPopup();
    var beacon3 = L.marker([2.5, 4.2]).addTo(map);
    beacon3.bindPopup("<b>Beacon 3</b>").openPopup();

    console.log(map.getBounds());
    console.log(imageBounds);
// map.fitBounds(imageBounds, {padding: []});
// map.fitWorld(imageBounds, {padding: []});

  //get json from Parse
    $.get('/heatmap/retrieveIntervalRecordsJSON')
        .success(function (rawData) {

        var goodData = [];
        //console.log(rawData);

        for (var i in rawData) {
            rawData[i].forEach(function(elem, index) {
                //console.log(elem, index);
                    elem.value = 0;
                    elem.fresh = true;
                    if(elem.coordX && elem.coordY && elem.timestamp && (elem.timestamp.__type == 'Date')) {
                        elem.x = parseFloat(elem.coordX * -20);
                        elem.y = parseFloat(elem.coordY * 20); 
                        elem.date = new Date(elem.timestamp.iso);

                        var point = {
                            x: parseFloat(elem.coordX),
                            y: parseFloat(elem.coordX)

                            // x: parseFloat((-97.125)/2),
                            // y: parseFloat(160/2)
                        };

                        goodData.push(point);
                    }
            });
        }

        var data = {
            data: goodData
          };

        console.log(goodData);
        heatmapLayer.setData(data);
    });

  </script>
</html>
