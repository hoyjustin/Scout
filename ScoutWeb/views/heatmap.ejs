<html>
<head>
    <% include template/header %>
    <style>
        body, html { margin:0; padding:0; height:100%;}
        body { font-family:sans-serif; }
        body * { font-weight:200;}
        .leaflet-map-pane img { max-width: none; max-height: none;}
        #map {  width:100%; height:75%; display: inline-block; }
        #dateSlider {
            position:absolute;
            height:150px;
            width:70%;
            right:0;
            left:0;
            bottom:0px;
            margin: 0 auto;
            /*            visibility: hidden;*/
        }
        #style { margin-left: auto;margin-right: auto; position: relative; width:80%; padding: 10px;}
        svg text {
          fill: #fff;
      }
      svg line {
          stroke: #fff;
          stroke-width: 1px;
      }
      svg .domain {
          stroke: #fff;
          fill: none;
      }
      svg rect {
          fill: #00AEF7;
          opacity: .4;
          stroke: #FFF;
      }


  </style>
</head>
<body>
    <% include template/navbar %>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />

    <link rel="stylesheet" href="js/ion.rangeSlider-2.0.6/css/normalize.css" type="text/css" />
    <link rel="stylesheet" href="js/ion.rangeSlider-2.0.6/css/ion.rangeSlider.css" type="text/css" />
    <link rel="stylesheet" href="js/ion.rangeSlider-2.0.6/css/ion.rangeSlider.skinHTML5.css" type="text/css" />

    <div id = 'map'></div>
    <!--         <div id = 'chartBox'></div> -->
    <div id = "style">
        <div id = "dateSlider"; position: relative; ></div>
    </div>

    <% include template/footer %>
</body>
<script>

    var w = 1280,
    h = 777,
    imageUrl = "/img/floorplan.jpg";
    normalizeCoef = 60;
    //heatmap.js config
    var cfg = {
    // radius should be small ONLY if scaleRadius is true (or small radius is intended)
    // if scaleRadius is false it will be the constant radius used in pixels

    maxOpacity: 0.6,
    radius: 4,
    blur: .90,
    // scales the radius based on map zoom
    "scaleRadius": true, 
    // if set to false the heatmap uses the global maximum for colorization
    // if activated: uses the data maximum within the current map boundaries 
    //   (there will always be a red spot with useLocalExtremas true)
    "useLocalExtrema": false,
    // which field name in your data represents the latitude - default "lat"
    latField: 'y',
    // which field name in your data represents the longitude - default "lng"
    lngField: 'x',
    // which field name in your data represents the data value - default "value"
    valueField: 'value'
};

var heatmapLayer = new HeatmapOverlay(cfg);

    // map.addLayer(heatmapLayer);

    //setup map
    var map = new L.map('map', {
        minZoom: 2,
        maxZoom: 4,
        center: [0, 0],
        zoom: 1,
        crs: L.CRS.Simple,
        layers: [heatmapLayer]
    });

    var southWest = map.unproject([-(w/2), h/2], map.getMaxZoom()-1);
    var northEast = map.unproject([w/2, -(h/2)], map.getMaxZoom()-1);
    var imageBounds = new L.LatLngBounds(southWest, northEast);
    var imageLayer = L.imageOverlay(imageUrl, imageBounds);
    imageLayer.addTo(map);
    //tell leaflet that the map is exactly as big as the image
    map.setMaxBounds(imageBounds);
    imageLayer.bringToBack();

    //add beacons to map
    var beacon1 = L.marker([0, 0]).addTo(map);
    beacon1.bindPopup("<b>Beacon 1</b>");
    var beacon2 = L.marker([20, -30]).addTo(map);
    beacon2.bindPopup("<b>Beacon 2</b>");
    var beacon3 = L.marker([20, 10]).addTo(map);
    beacon3.bindPopup("<b>Beacon 3</b>");

    console.log(map.getBounds());
    console.log(imageBounds);
// map.fitBounds(imageBounds, {padding: []});
// map.fitWorld(imageBounds, {padding: []});

  //get json from Parse
  $.get('/heatmap/retrieveIntervalRecordsJSON')
  .success(function (rawData) {

    var goodData = [];
        //console.log(rawData);
        for (var i in rawData) {
            rawData[i].forEach(function(elem, index) {
                //console.log(elem, index);
                elem.value = 0;
                elem.fresh = true;
                if(elem.coordX && elem.coordY && elem.timestamp && (elem.timestamp.__type == 'Date')) {
                    elem.x = parseFloat(elem.coordX*normalizeCoef-60);
                    elem.y = parseFloat(elem.coordY*normalizeCoef-120);
                    elem.date = moment(elem.timestamp.iso);

                        // var point = {
                        //     x: parseFloat(elem.coordX),
                        //     y: parseFloat(elem.coordY)

                        //     // x: parseFloat((-97.125/2)),s
                        //     // y: parseFloat(160/2)
                        // };

                        goodData.push(elem);
                    }
                });
        }

        var data = {
            data: goodData
        };

        var today = moment().startOf('day');
        var prevDate = moment(today);
        prevDate.subtract(7, "days");
        console.log(today);
        console.log(prevDate);

        $("#dateSlider").ionRangeSlider({
            min: +prevDate.format("X"),
            max: +today.format("X"),
            grid: true,
            force_edges: true,
            prettify_enabled: true,
            step: 1,
            prettify: function (num) {
                return moment(num, "X").format("LL");
            }
        });

// Save slider instance to var
var slider = $("#dateSlider").data("ionRangeSlider");
$("#dateSlider").css("visibility", "visible");
$("#dateSlider").hide().fadeIn(1000);

        //console.log(goodData);
        // heatmapLayer.setData(data);
        var nextDate = prevDate;
        console.log( nextDate);

        //initilaize variables for the D3 chart
        var countArray = [],
        svg,
        day,
        x,
        y,
        margin,
        height,
        width,
        intervalCounter = 10,
        index = 0,
        prevDate,
        data = {
            max:15,
            min:0,
            data:[]
        };

        //refresh every 100 milliseconds
        setInterval(function () {
            //iterates 10 times for each day
            if (intervalCounter == 10)
            {
                intervalCounter = 0;
                if (nextDate <= today) {
                    getAnotherDay();
                }
            }
            else
            {
                intervalCounter++;
            }

            //create new array for live points, push it to the map
            var newData = [];
            for (var j = 0; j < data.data.length; j++) {
                var point = data.data[j];
                if (point.value >= 10) {
                    point.fresh = false;
                }
                //fade in fresh points, fade out unfresh points
                if (point.fresh)
                {
                    point.value = point.value + .8;
                }
                else
                {
                    point.value = point.value - .1;
                }
                if(point.value > 0)
                {
                    newData.push(data.data[j]);
                }
            }
            data.data = newData;
            // push new daily data into heatmap layer
            //console.log(data);
            heatmapLayer.setData(data);

        }, 100);

function getAnotherDay() {
                      // Call sliders update method with any params
                      slider.update({
                        from: +nextDate.format("X")
                    });
                      nextDate = moment(nextDate).add(1, "days");
                      console.log(nextDate);
                      var todayCounter = 0;

          //iterate over goodData, push today's events to data.data
          for (;;index++) {
            var thisDate = goodData[index].date;
            //console.log(thisDate + nextDate);
            // console.log(thisDate);
            // console.log(nextDate);
            if(thisDate < nextDate) {
              data.data.push(goodData[index]);
              todayCounter++;
              prevDate = thisDate;
          }
          else {
              //Still need to increment prevDate if there is no data
              if(todayCounter == 0) {
                console.log("prevDate: " + prevDate);
                prevDate.subtract(1, "days");
            }
            var todayCount = {
                date:prevDate,
                count:todayCounter
            };
            countArray.push(todayCount);
            break;
        }
    }
}
});

</script>
</html>
