if (Parse == null) var Parse = require('parse').Parse;

var BUSINESS_TABLE = 'Business';
var REWARDS_TABLE = 'Reward';
var INTERVAL_TABLE = 'NEW_Interval';
var INTERVAL_RECORD_TABLE = 'NEW_IntervalRecord';

/*
args list format:
  { 'arg1': arg1Obj, 'arg2': arg2Obj }

success callback format:
  function (object) {
    ...
  }

failure callback format:
  function (object, error) {
    ...
    console.log(error.message);
  }

*/

// arguments must include parse user object
var retrieveBusiness = function (successCb, failureCb, args) {
  var user = args['user'];

  var BusinessObj = Parse.Object.extend(BUSINESS_TABLE);
  var businessQuery = new Parse.Query(BusinessObj);

  console.log('retrieving business');

  businessQuery.equalTo('owner', user);
  businessQuery.first({
    success: successCb,
    error: failureCb
  })
}

// arguments must include business object
var retrieveRewards = function (successCb, failureCb, args) {
  var business = args['business'];

  var RewardObj = Parse.Object.extend(REWARDS_TABLE);
  var rewardQuery = new Parse.Query(RewardObj);

  rewardQuery.equalTo('business', business);

  rewardQuery.find({
    success: successCb,
    error: failureCb
  });
}


// arguments must include interval object for a user
var retrieveIntervalJSON = function (successCb, failureCb, args) {
  var user = args['user'];

  // if business is successfully queried, then query interval table
  var retBusSuccess = function (business) {
    var IntervalObj = Parse.Object.extend(INTERVAL_TABLE);
    var intervalQuery = new Parse.Query(IntervalObj);

    console.log(JSON.stringify(business));

    intervalQuery.find({
      success: successCb,
      error: failureCb
    });
  }

  var retBusFailure = function (business, error) {
    console.log('ERROR:'+error);
  }

  retrieveBusiness(retBusSuccess, retBusFailure, {'user': user});
}

// arguments must include the current parse user
var retrieveIntervalRecordsJSON = function (successCb, failureCb, args) {
    var user = args['user'];

    console.log('user:\n'+JSON.stringify(user));

    var intervalSuccess = function (interval) {
      var IntervalRecordObj = Parse.Object.extend(INTERVAL_RECORD_TABLE);
      var intervalRecordQuery = new Parse.Query(IntervalRecordObj);

      console.log(JSON.stringify(interval));

      //intervalRecordQuery.equalTo('interval', interval);

      intervalRecordQuery.find({
        success: successCb,
        error: failureCb
      })
    }
    
    retrieveIntervalJSON(successCb, failureCb, {'user': user});
}

exports.retrieveBusiness = retrieveBusiness;
exports.retrieveRewards = retrieveRewards;
exports.retrieveIntervalJSON = retrieveIntervalJSON;
exports.retrieveIntervalRecordsJSON = retrieveIntervalRecordsJSON;

